<?php
defined('BASEPATH') OR die("Access denied!");
class Result_model extends MY_Model {
	public function __construct() {
		parent::__construct();
		$this->load->database();
	}

	/**
	 * Add Result of Patient Test which value is text/amount
	 */
	public function set_ptest_text_result($patient_sample_id, $data) {
		$result        = $this->db->get_where(self::$CamLIS_db.'.camlis_ptest_result', array('status' => TRUE, 'type' => 0, 'patient_sample_id' => $patient_sample_id))->result_array();
		$prev_ptest    = array_column($result, 'patient_test_id');
		$new_result    = array();
		$update_result = array();
		if (count($data) > 0) {
			foreach ($data as $row) {
				if (in_array($row['patient_test_id'], $prev_ptest)) {
					$row['modifiedBy']   = $this->user_id;
					$row['modifiedDate'] = $this->timestamp;
					$update_result[]     = $row;
				}
				else {
					$row['entryBy']   = $this->user_id;
					$row['entryDate'] = $this->timestamp;
					$new_result[]     = $row;
				}
			}

			if (count($new_result) > 0) $this->db->insert_batch(self::$CamLIS_db.'.camlis_ptest_result', $new_result);
			if (count($update_result) > 0) {
				$this->db->where('status', TRUE);
				$this->db->where('patient_sample_id', $patient_sample_id);
				$this->db->update_batch(self::$CamLIS_db.'.camlis_ptest_result', $update_result, 'patient_test_id');
			}
			return $this->db->affected_rows();
		}
		return 0;
	}

	public function set_ptest_organism_antibiotic_result($patient_sample_id, $data) {
		
		//
		$result     = $this->db->get_where(self::$CamLIS_db.'.camlis_ptest_result', array('status' => TRUE, 'type' => 1, 'patient_sample_id' => $patient_sample_id))->result_array();
		//
		$patient_id = $this->db->get_where(self::$CamLIS_db.'.camlis_patient_sample', array('id' => $patient_sample_id))->row()->patient_id;
		$patient_info = $this->db->get_where(self::$CamLIS_db.'.patient_v', array('pid' => $patient_id))->row();
		 
				
		$prev_ptest = array();
		foreach ($result as $row) {
			$key = $row['patient_test_id'].'-'.trim($row['result']);
			$prev_ptest[$key] = $row['ID'];
		}
		if (count($data) > 0) {
			$_antibiotic_result = array();
			foreach ($data as $item) {
				$key = trim($item['patient_test_id']).'-'.trim($item['result']);
				$result_id = 0;
				//Organism
				if (isset($prev_ptest[$key])) {
					$result_id = $prev_ptest[$key];
					$_values = elements(array('performer_id', 'test_date', 'quantity_id'), $item);
					$this->db->set($_values);
					$this->db->set('modifiedBy', $this->user_id);
					$this->db->set('modifiedDate', $this->timestamp);
					$this->db->where(array('status' => TRUE, 'ID' => $result_id));
					$this->db->update(self::$CamLIS_db.'.camlis_ptest_result'); 
					unset($prev_ptest[$key]);
				} else {
					$_values = elements(array('patient_sample_id', 'patient_test_id', 'performer_id', 'test_date', 'result', 'type', 'quantity_id'), $item);
					$this->db->set($_values);
					$this->db->set('entryBy', $this->user_id);
					$this->db->set('entryDate', $this->timestamp);
					$this->db->insert(self::$CamLIS_db.'.camlis_ptest_result');
					$result_id = $this->db->insert_id(); 
					
					/* vuthy sin
					 * 2017-01-18
					 * @target: while add result meet the create urgent send mail
					 * @@param: resutl id
					 * return data row object
					*/
					// query get organism map criteria send mail
					$result_value = $this->db->query("select 
														sto.ID,
														sto.sample_test_id, 
														om.organism_id,
														om.organism_map_name,
														om.organism_map_kh,
														om.description
														
													from camlis_std_test_organism  sto
													inner join camlis_organism_map om on om.organism_id = sto.organism_id
													where sto.ID = ?
													and om.`type` = 1",
									array($_values["result"]))->row(); 
					 // is checking have data in mapping
					if(isset($result_value->organism_id) && $result_value->organism_id > 0){
						// mail every meet the disseases
						$this->load->model('email_model'); 
						$obj		= new stdClass();
						$obj->patient_id = $patient_id; 
						$obj->sex = $patient_info->sex;
						$obj->_year = $patient_info->_year;
						$obj->diseases = $result_value->organism_id.' : '.$result_value->organism_map_name.' - '.$result_value->organism_map_kh; 
						 
						// insert tracking email
						$this->db->set('mail', json_encode($obj));
						$this->db->set('date', date('Y-m-d'));
						$this->db->set('status', TRUE);
						$this->db->insert(self::$CamLIS_db.'.daily_mail'); 
						$obj->inscress_id = $this->db->insert_id(); 
						// send email
						$this->email_model->email_urgent_test($obj); 
						// end
					}
					
				}
					 
				//Antibiotic
				if ($result_id > 0) {
					$_antibiotic_id = array_column($item['antibiotic'], 'antibiotic_id');
					foreach ($item['antibiotic'] as $value) {
						if (isset($value['antibiotic_id']) && $value['antibiotic_id'] > 0 && isset($value['sensitivity']) && $value['sensitivity'] > 0) {
							$test_zone = isset($value['test_zone']) ? "'".$value['test_zone']."'" : "NULL";
							$invisible = isset($value['invisible']) ? "'".$value['invisible']."'" : "0";
							$_tmp = array($result_id, $value['antibiotic_id'], $value['sensitivity'], $test_zone, $invisible, $this->user_id, "'".$this->timestamp."'");
							$_antibiotic_result[] = "(".implode(',', $_tmp).")";
						}
					}
					//Delete antibiotic result that ar not in list
					if (count($_antibiotic_id) > 0) {
						$this->db->set(array('status' => FALSE, 'modifiedBy' => $this->user_id, 'modifiedDate' => $this->timestamp));
						$this->db->where('status', TRUE);
						$this->db->where('presult_id', $result_id);
						$this->db->where_not_in('antibiotic_id', $_antibiotic_id);
						$this->db->update(self::$CamLIS_db.'.camlis_ptest_result_antibiotic');
					}
				}
			}

			//Add antibiotic result
			if (count($_antibiotic_result) > 0) {
				$sql  = "INSERT INTO camlis_ptest_result_antibiotic (presult_id, antibiotic_id, sensitivity, test_zone, invisible, entryBy, entryDate)";
				$sql .= " VALUES ".implode(",", $_antibiotic_result);
				$sql .= " ON DUPLICATE KEY UPDATE status = TRUE, sensitivity = VALUES(sensitivity), test_zone = VALUES(test_zone), invisible = VALUES(invisible), modifiedBy = $this->user_id, modifiedDate = '".$this->timestamp."'";
				$this->db->query($sql);
			}

			//Delete result that are not in list
			$prev_result = array_values($prev_ptest);
			if (count($prev_result) > 0) {
                $this->db->set(array('status' => FALSE, 'modifiedBy' => $this->user_id, 'modifiedDate' => $this->timestamp));
                $this->db->where('status', TRUE);
				$this->db->where('type', 1);
				$this->db->where_in('ID', $prev_result);
				$this->db->update(self::$CamLIS_db.'.camlis_ptest_result');

                $this->db->set(array('status' => FALSE, 'modifiedBy' => $this->user_id, 'modifiedDate' => $this->timestamp));
                $this->db->where('status', TRUE);
				$this->db->where_in('presult_id', $prev_result);
				$this->db->update(self::$CamLIS_db.'.camlis_ptest_result_antibiotic');
			}
			return $this->db->affected_rows();
		}
		return 0;
	}

	/**
	 * Delete Result
	 * @param integer $patient_sample_id
	 * @param  integer $ptest_ids Patient's Sample_test ID
	 * @return integer Number of deleted rows
	 */
	public function delete_ptest_result($patient_sample_id, $ptest_ids) {
		if (count($ptest_ids) == 0) return 0;

		$this->db->set('status', FALSE);
		$this->db->set('modifiedBy', $this->user_id);
		$this->db->set('modifiedDate', $this->timestamp);
		$this->db->where('status', TRUE);
		$this->db->where('patient_sample_id', $patient_sample_id);
		$this->db->where_not_in('patient_test_id', $ptest_ids);
		$this->db->update(self::$CamLIS_db.'.camlis_ptest_result');

		return $this->db->affected_rows();
	}

	/**
	 * Fetch All Test Result
	 * @param $patient_sample_id
	 */
	public function get_patient_sample_result($patient_sample_id) {
		$this->db->select('
			presult.ID AS ptest_result_id,
			presult.patient_test_id,
			ptest.sample_test_id,
			sample_test.field_type,
			sample_test.is_heading,
			ptest.is_rejected,
			presult.result,
			test.test_name,
			presult.`type`,
			presult.quantity_id,
			qty.quantity,
			presult.test_date,
			_tmp1.first_test_date,
			presult.performer_id,
			(CASE organism.organism_value
				WHEN 1 THEN CONCAT(organism.organism_name, \' Positive\')
				WHEN 2 THEN CONCAT(organism.organism_name, \' Negative\')
				ELSE organism.organism_name
			END) AS organism_name,
			r_antibiotic.antibiotic_id,
			antibiotic.antibiotic_name,
			r_antibiotic.sensitivity,
			r_antibiotic.test_zone,
			r_antibiotic.invisible,
			NULLIF(_tmp.child_count, 0) AS child_count
		');
		$this->db->from(self::$CamLIS_db.".camlis_ptest_result AS presult");
		$this->db->join(self::$CamLIS_db.".camlis_patient_sample_tests AS ptest", "presult.patient_test_id = ptest.ID", "inner");
		$this->db->join(self::$CamLIS_db.".camlis_std_sample_test AS sample_test", "sample_test.ID = ptest.sample_test_id", "inner");
        $this->db->join(self::$CamLIS_db.".camlis_std_test AS test", "test.ID = sample_test.test_id", "inner");
		$this->db->join(self::$CamLIS_db.".camlis_ptest_result_antibiotic AS r_antibiotic", "presult.ID = r_antibiotic.presult_id AND r_antibiotic.status = TRUE", "left");
		$this->db->join(self::$CamLIS_db.".camlis_std_antibiotic AS antibiotic", "r_antibiotic.antibiotic_id = antibiotic.ID AND antibiotic.status = TRUE", "left");
		$this->db->join(self::$CamLIS_db.".camlis_std_test_organism AS t_organism", "presult.result = t_organism.ID AND t_organism.status = TRUE AND presult.type = 1", "left");
		$this->db->join(self::$CamLIS_db.".camlis_std_organism AS organism", "organism.ID = t_organism.organism_id AND organism.status = TRUE", "left");
		$this->db->join(self::$CamLIS_db.".camlis_std_organism_quantity AS qty", "qty.ID = presult.quantity_id AND qty.status = TRUE", "left");
		$this->db->join('(SELECT testPID, count(*) AS child_count FROM '.self::$CamLIS_db.'.camlis_std_sample_test WHERE status = TRUE GROUP BY testPID) _tmp', 'sample_test.ID = _tmp.testPID', 'left');
        $this->db->join('(
		    SELECT test_result.patient_sample_id, sample_test.department_sample_id, MIN(test_result.test_date) AS first_test_date
		    FROM camlis_ptest_result AS test_result
		    INNER JOIN camlis_patient_sample_tests AS psample_test ON test_result.patient_test_id = psample_test.ID
		    INNER JOIN camlis_std_sample_test AS sample_test ON sample_test.ID = psample_test.sample_test_id
		    WHERE test_result.status = TRUE AND psample_test.status = TRUE AND sample_test.status = TRUE AND psample_test.patient_sample_id = '.$patient_sample_id.'
		    GROUP BY test_result.patient_sample_id, sample_test.department_sample_id
		) _tmp1', 'presult.patient_sample_id = _tmp1.patient_sample_id AND sample_test.department_sample_id = _tmp1.department_sample_id', 'left');
		$this->db->where('presult.status', 1);
		$this->db->where('ptest.status', 1);
		$this->db->where('sample_test.status', 1);
		$this->db->where('ptest.patient_sample_id', $patient_sample_id);
		$this->db->order_by('sample_test.order', 'asc');

		return $this->db->get()->result_array();
	}
}