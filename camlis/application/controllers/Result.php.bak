<?php
defined('BASEPATH') OR die("Access denied!");
class Result extends MY_Controller {
	public function __construct() {
		parent::__construct();
		$this->load->model(array('result_model', "sample_model", "patient_model"));
		
		//Load Language
		$this->app_language->load('sample');
	}
	
	/**
	 * Get Qunatiy of result
	 */
	public function resultQty() {
		$result = $this->result_model->getResultQty();
		return $result;
	}
	
	/**
	 * Save Patient's Sample Result
	 */
	public function save() {
		$this->form_validation->set_rules('patient_sample_id', 'patient_sample_id', 'required|integer|greater_than[0]');
		$this->form_validation->set_rules('result_comment', 'result_comment', 'trim');
		$results			= $this->input->post("results");
		$patient_sample_id	= $this->input->post("patient_sample_id");
		$result_comment		= $this->input->post("result_comment");
		$status             = false;
		$msg                = _t('global.msg.fill_required_data');

		//Set Result
		$is_valid = true;
		if ($this->form_validation->run() === TRUE && is_array($results) && count($results) > 0) {
			$text_result                = array();
			$organism_antibiotic_result = array();
			$patient_test_list          = array_column($results, 'patient_test_id');
			foreach ($results as $result) {
				$result['patient_sample_id'] = $patient_sample_id;
				$test_date                   = !isset($result['test_date']) ? false : DateTime::createFromFormat("Y-m-d", $result['test_date']);
				if (!$test_date || (int)$result['performer_id'] <= 0 || (int)$result['patient_test_id'] <= 0) {
					$is_valid = false;
					break;
				}

				if (in_array($result['field_type'], array(0, 3, 4, 5)))
				{
					$text_result[] = elements(['patient_sample_id', 'patient_test_id', 'performer_id', 'test_date', 'result'], $result);
				}
				else if (in_array($result['field_type'], array(1, 2)) && is_array($result['result']) && count($result['result']) > 0)
				{
					foreach ($result['result'] as $item) {
						$organism_antibiotic_result[] = [
							'patient_sample_id' => $result['patient_sample_id'],
							'patient_test_id'   => $result['patient_test_id'],
							'performer_id'      => $result['performer_id'],
							'test_date'         => $result['test_date'],
							'result'            => $item['test_organism_id'],
							'type'              => 1,
							'quantity_id'       => isset($item['quantity_id']) ? $item['quantity_id'] : NULL,
							'antibiotic'        => isset($item['antibiotic']) && is_array($item['antibiotic']) ? $item['antibiotic'] : array()
						];
					}
				}
			}

			if ($is_valid) {
				$r = 0;
				if (count($patient_test_list) > 0) $r += $this->result_model->delete_ptest_result($patient_sample_id, $patient_test_list);
				if (count($text_result) > 0) $r += $this->result_model->set_ptest_text_result($patient_sample_id, $text_result);
				if (count($organism_antibiotic_result) > 0) $r += $this->result_model->set_ptest_organism_antibiotic_result($patient_sample_id, $organism_antibiotic_result);
				if ($r > 0) {
					$status = FALSE;
					$msg    = _t('sample.msg.sresult_success');
				} else {
					$status = false;
					$msg    = _t('sample.msg.save_fail');
				}
			}
		}

		//Set Result comment
		if ($this->form_validation->run() === TRUE && $is_valid) {
			$this->load->model('patient_sample_model');
			// delete comment
            $this->patient_sample_model->delete_result_comment($patient_sample_id);
            //looping insert comment
            for($i=0; $i< count($result_comment); $i++) {
                $r = $this->patient_sample_model->create_result_comment($patient_sample_id,
                    array(
                        'patient_sample_id' =>$patient_sample_id,
                        'result_comment' => $result_comment[$i]["comment"],
                        'sample_id' => $result_comment[$i]["sample_id"])
                );
            }


			if ($r > 0) {
				$status = FALSE;
				$msg    = _t('sample.msg.sresult_success');
			}
		}

		$users = $this->patient_sample_model->get_patient_sample_user($patient_sample_id);
		$data['result'] = json_encode(array('status' => $status && $is_valid, 'msg' => $msg, 'data' => ['users' => $users]));
		$this->load->view('ajax_view/view_result', $data);
	}
	
	/**
	 * Fetch All result base on patient sample
	 */
	public function get_patient_sample_result() {
		$patient_sample_id = $this->input->post('patient_sample_id');

		$result = array();
		if ((int)$patient_sample_id > 0) {
			$_tmp_result = $this->result_model->get_patient_sample_result($patient_sample_id);
			$result = $_tmp_result;
		}
		
		$data['result'] = json_encode($result);
		$this->load->view('ajax_view/view_result', $data);
	}

    /**
     * Print result Patient's sample
     * @param $patient_sample_id
     * @param string $type
     */
	public function preview_psample_result($patient_sample_id, $type = 'preview',$param_opt = '',$sample_id='') {
		
		  
        $this->load->helper("sample_test");
		$this->load->model(['gazetteer_model', 'patient_sample_model', 'test_model', 'laboratory_model']);
		
		// checking
		if($param_opt!=''){
			$dep_opt_view = str_replace("%2C",",",$param_opt);
			$sam_opt_view = str_replace("%2C",",",$sample_id);
		}else{ 
			$dep_opt_view = $this->input->post('department_optional_view');
			$sam_opt_view = $this->input->post('sample_optional_view');
		}
		
		

		/* Get Patient's Sample */
		$patient_sample	= $this->patient_sample_model->get_patient_sample(array('psample.ID' => $patient_sample_id));
		$psample_detail = $this->patient_sample_model->get_patient_sample_detail($patient_sample_id);
		$patient_sample	= isset($patient_sample[0]) > 0 ? $patient_sample[0] : NULL;
		$patient_id		= isset($patient_sample['patient_id']) ? $patient_sample['patient_id'] : NULL;
		$patient_info	= $this->patient_model->get_patient_info($patient_id);

		//Patient's sample detail
        $psample_details = array();
        foreach ($psample_detail as $row) {
            $psample_details[$row['department_sample_id']] = $row;
        }
		
		//Get Result
		$hasAntibiotic	= FALSE;
		$_tmp_result    = $this->result_model->get_patient_sample_result($patient_sample_id);
		$ptest_result   = array();

		//var_dump($_tmp_result);

		if (count($_tmp_result) > 0) {
			foreach ($_tmp_result as $row) {
				$patient_test_id = $row['patient_test_id'];
				// array in 1: single 2: multiple
                // note 1 :single not to be apply in criteria
				//if (in_array($row['field_type'], array(1, 2)) && $row['type'] == 1) {
                if (in_array($row['field_type'], array(1,2)) && $row['type'] == 1) {

					if (!isset($ptest_result[$patient_test_id])) {
						$ptest_result[$patient_test_id]           = elements(['patient_test_id', 'sample_test_id', 'test_name', 'field_type', 'is_heading', 'is_rejected', 'test_date', 'first_test_date', 'performer_id'], $row);
						$ptest_result[$patient_test_id]['result'] = array();
					}
					// checking result equal culture that have id 274
                    if ($row['test_name']=='Culture') {
                        $hasAntibiotic = TRUE;
                    }

					$test_organism_id = $row['result'];
					if (!isset($ptest_result[$patient_test_id]['result'][$test_organism_id])) {
						$ptest_result[$patient_test_id]['result'][$test_organism_id] = array(
							'test_organism_id'  => $test_organism_id,
							'organism_name'     => $row['organism_name'],
							'quantity_id'       => $row['quantity_id'],
							'quantity'          => $row['quantity'],
							'antibiotic'        => array()
						);
					}
					if ($row['antibiotic_id'] > 0 && isset($ptest_result[$patient_test_id]['result'][$test_organism_id])) {
						$ptest_result[$patient_test_id]['result'][$test_organism_id]['antibiotic'][] = elements(['antibiotic_id', 'antibiotic_name', 'sensitivity', 'test_zone'], $row);
					}
				} else {
					$ptest_result[$patient_test_id] = elements(['patient_test_id', 'sample_test_id', 'test_name', 'field_type', 'is_heading', 'is_rejected', 'result', 'test_date', 'first_test_date', 'performer_id'], $row);
				}
			}
		}

		$this->data['sensitivity_type']	= array(
			1 => array('abbr'	=> 'S', 'full'	=> 'Sensitive'),
			2 => array('abbr'	=> 'R', 'full'	=> 'Resistant'),
			3 => array('abbr'	=> 'I', 'full'	=> 'Intermediate')
		);

		//Test of Patient's sample
		$psample_tests  = sample_test_hierarchy_row($this->patient_sample_model->get_patient_sample_test($patient_sample_id, TRUE,0,$dep_opt_view,$sam_opt_view));

		//Get Ref. Ranges
		$sample_test_id		= array_column($psample_tests, 'sample_test_id');
		$_tmp_ref_ranges	= $this->test_model->get_std_sample_test_ref_range($sample_test_id);
		$ref_ranges			= array();
		$age				= getAge($patient_info['dob']);//getAging($patient_info['dob']);;
		$gender				= !is_numeric($patient_info['sex']) && $patient_info['sex'] == 'M' ? 1 : 2;
		if ($_tmp_ref_ranges) {
			foreach ($_tmp_ref_ranges as $row) {
				$row = (array)$row;
				if (isset($ref_ranges[$row['sample_test_id']])) continue;
				$min_age = (int)($row['min_age'] * $row['min_age_unit']);
				$max_age = (int)($row['max_age'] * $row['max_age_unit']);

				if ($row['is_equal'] == 1 && ($age >= $min_age && $age <= $max_age) && ($row['gender'] == 3 || $row['gender'] == $gender)) {
                    $ref_ranges[$row['sample_test_id']] = array('min_value' => $row['min_value'], 'range_sign' => $row['range_sign'], 'max_value' => $row['max_value']);
				} else if ($age >= $min_age && $age < $max_age && ($row['gender'] == 3 || $row['gender'] == $gender)) {
                    $ref_ranges[$row['sample_test_id']] = array('min_value' => $row['min_value'], 'range_sign' => $row['range_sign'], 'max_value' => $row['max_value']);
				}
			}
		}

		$this->data['patient']              = $patient_info;
		$this->data['patient_sample']       = $patient_sample;
		$this->data['psample_details']      = $psample_details;
		$this->data['psample_tests']        = sample_test_hierarchy($psample_tests);
		$this->data['psample_results']      = $ptest_result;
		$this->data['ref_ranges']           = $ref_ranges;
		$this->data['type']                 = $type;
		$this->data['laboratory_variables'] = (array)$this->laboratory_model->get_variables();

		if ($hasAntibiotic == FALSE) $this->data['sensitivity_type'] = array();
		
		$this->load->view('template/print/psample_result.php', $this->data);
	}
}